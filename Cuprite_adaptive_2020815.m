function [W,V,H,INFO] = Cuprite_adaptive_2020815(X, options)
if any(X(:)<0),                                  error('X contains negative values.'); end
if ~isfield(options,'K'),                        error('options must contain parameter K (number of basis vectors).'); end
if ~isfield(options,'L'),                        error('options must contain parameter L (maximal number of basis vectors per data sample).'); end
if ~isfield(options,'numIter'),                  error('options must contain parameter numIter.'); end
if ~isfield(options,'sparseCoder'),              error('options must contain parameter sparseCoder (function_handle).'); end
if ~isfield(options,'updateType'),               error('options must contain parameter updateType (string).'); end
if ~isfield(options,'numUpdateIter') && ~isfield(options,'timeBudgetUpdate')
                                                 error('options must contain either parameter numUpdateIter or timeBudgetUpdate.');
end

switch options.updateType
    case 'MU'
    case 'Cauchy'
    case 'li'
    case 'li_s'
    case 'li_f'
    case 'ANLS_FC'
    case 'IS'
        
    case 'ANLS_PG'
        if ~isfield(options,'NNLS_PG_tolerance'), error('options must contain parameter NNLS_PG_tolerance for updateType == ''ANLS_PG''.'); end
        if ~isfield(options,'NNLS_PG_maxIter'),   error('options must contain parameter NNLS_PG_maxIter for updateType == ''ANLS_PG''.'); end
        NNLS_PG_tolerance = options.NNLS_PG_tolerance;
        NNLS_PG_maxIter = options.NNLS_PG_maxIter;
    case 'NNKSVD'
        
    otherwise
        error('unknown update method.')
end

sparseCoder = options.sparseCoder;

if isfield(options,'timeBudgetUpdate')
    timeBudgetUpdate = options.timeBudgetUpdate;
    options.numUpdateIter = [];
else
    timeBudgetUpdate = [];
end

if isfield(options,'sparseCoderParams')
    sparseCoderParams = options.sparseCoderParams;
else
    sparseCoderParams = [];
end

if isfield(options,'verbosity')
    VERBOSITY = options.verbosity;
else
    VERBOSITY = 1;
end

[D,N] = size(X);
K =             options.K;
L =             options.L;
numIter =       options.numIter;
updateType =    options.updateType;
numUpdateIter = options.numUpdateIter;
 
if nargout > 2
    E = zeros(numIter,1);
    E_SC = zeros(numIter,1);
    SCtime = zeros(numIter,1);
    UDtime = zeros(numIter,1);
    INFO = [];
end

if K >= N
    H = diag(sqrt(sum(X.^2)));
    H = [H; zeros(K-N,N)];
    
    W = X;
    W = W .* diag(1./sqrt(sum(W.^2)));
    W = [W, ones(D,K-N) / D];
    
    warning('too little data, trivial solution is returned.')
    return
end

if isfield(options,'initType') && strcmp(options.initType, 'rand')
    initType = 'rand';
else
    initType = 'samples';
end

if isfield(options,'W')
    if any(options.W(:)<0), error('options.W contains negative values.'); end
    W = options.W;
else
    if strcmp(initType, 'rand')
        W = rand(D,K);
    else
        rp = randperm(N);
        W = X(:,rp(1:K));
    end
end
W = W * diag(1./sqrt(sum(W.^2)));

%%%-----------------------------------------------------------------%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

      %            H = pinv(W) * y;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for iter = 1:numIter
    
    if VERBOSITY
        fprintf('Iteration: %d   ',iter);
    end
    
    %%% Sparse Coder Stage
    tic
    if isempty(sparseCoderParams)
        H = sparseCoder(X,W,L);
    else
        H = sparseCoder(X,W,L,sparseCoderParams);
    end
    elapsedT = toc;
    
    if nargout > 2
        E_SC(iter) = norm(X-W*H,'fro');
        SCtime(iter) = elapsedT;
    end
    
    if VERBOSITY
        fprintf('SC-Error: %d   ',norm(X-W*H,'fro')/norm(X,'fro'));
    end
    
    unusedIdx = all(H == 0,2);
    numUnused = sum(unusedIdx);
    W = W(:,~unusedIdx);
    H = H(~unusedIdx,:);
    
    %%% Update%%% Stage%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    switch updateType
        case 'MU'
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%参数设置 
%[iW, location, y] =VCA(X,...
      %          'Endmembers',K); 
          % save iW.mat iW;
         %  load iW;
      %      W=iW;
%load('cuprite.mat');
%load CupriteS1_F224
%load('groundTruth_Cuprite_nEnd12.mat')
 deta=0.8;
             beta1=0;
            % beta2=1.2;
             beta3=2;
             beta4=0.001;
            beta5=0.23;
         %    data=reshape(X',250,191,188);
        %  W=W1';
          %  [A_SCLSU, psis_SCLSU] = SCLSU(data,W);
       % load('Cuprite_GLMM.mat')     
     A_SCLSU=fcls(W,X);
     %  save A_SCLSU.mat A_SCLSU;
    %   load A_SCLSU;
               H = A_SCLSU;
        %[H, W, Xi] = RCMF(X, 3, 10, 100 );
             
         %    M=W1';
          %   load('groundTruth_Cuprite_nEnd12.mat')
%W=M;
%H=pinv(M)*X;
                R=X-W*H;
               q=size(H,1);
             
              D1=0.02*eye(q);
              D2=std(R);
              D3=std(R,0,2);
            % DD=(beta3*H*H')/(beta3*H*H'+D1+eps);
         DD=(beta3*H*H'+(1e-2)*H.*D2*H')/(beta3*H*H'+D1+(1e-2)*H.*D2*H'+(1e-2)*W'*(W.*D3));
     % DD=(beta5*H*H'+(0.02)*H.*D2*H')/(beta5*H*H'+D1+(0.02)*W'*(W.*D3));
         VD=size(W,2);
       %  DD=eye(VD,VD);
               V=pinv(DD)*H;
               %V=W'*R;
                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         
 
% WE=1/VD*ones(VD,1);
% beta2=0.2*ones(VD,1);
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            if isempty(timeBudgetUpdate)
                tic
               for k = 1:numUpdateIter
                for j=1:VD
                      WE(j)=norm((X-W(:,j)*DD(j,j)*V(j,:)),'fro');
                      %  beta2(j)=1./(sqrt(trace(W'*W(:,j)*V(j,:)*V')));
                   beta2(j)=1/sqrt(norm(W'*W(:,j)*V(j,:)*V','fro'));
                  % beta2(j)=0.0006;
                    % W = W .* ((X.*RX*H') ./ (W*H.*RX*H' + 1e-12));j
                    % W = W .* (((X).*RX*H') ./ (W*H.*RX*H'+deta*RX.*R*H'+1e-12 ));
             %      D=diag(diag(pinv(W'*(W*H)*H')))*diag(diag(H*X'*W));
         %    for jj=1:VD
                 %if j==jj
                   %  W(:,j) = W(:,j) .* ((X*V(j,:)'*D(j,j)')/WE(j)./(W(:,j)*D(j,j)*V(j,:)*V(j,:)'*D(j,j)'/WE(j)+beta2*W(:,j)*V(j,:)*V(j,:)'+eps));
                 %  W(:,j) = W(:,j) .* ((X*V(j,:)'*D(j,j)')/WE(j)./(W(:,j)*D(j,j)*V(j,:)*V(j,:)'*D(j,j)'/WE(j)+eps));
                % else
                     W(:,j) = W(:,j) .* ((X*V(j,:)'*DD(j,j)')/WE(j)./(W(:,j)*DD(j,j)*V(j,:)*V(j,:)'*DD(j,j)'/WE(j)+beta2(j)*W*V*V(j,:)'+eps));
               %  end
                     
                      W=abs(W);
              %%%%%%%%%%%%updata D
                      DD(j,j)=DD(j,j).*((W(:,j)'*X*V(j,:)')/WE(j)./(W(:,j)'*W(:,j)*DD(j,j)*V(j,:)*V(j,:)'/WE(j)+eps));
                    %  D1=diag(D);
                    %  D=diag(D1);
                   % H=D*V;
                   
                      DD=abs(DD);
                   
                    if k < numUpdateIter
                      %  if j==jj
                       % V(j,:)=V(j,:).*((D(j,j)'*W(:,j)'*X)/WE(j)./(beta4*V(j,:).^(-0.5)+beta2*W(:,j)'*W(:,j)*V(j,:)+D(j,j)'*W(:,j)'*W(:,j)*D(j,j)*V(j,:)/WE(j)+eps+beta1*(diag(1./vecnorm(V(j,:),2,2)))*V(j,:))); 
                      % V(j,:)=V(j,:).*((D(j,j)'*W(:,j)'*X)/WE(j)./(beta4*V(j,:).^(-0.5)+D(j,j)'*W(:,j)'*W(:,j)*D(j,j)*V(j,:)/WE(j)+eps+beta1*(diag(1./vecnorm(V(j,:),2,2)))*V(j,:)));   
                      %  else
                            V(j,:)=V(j,:).*((DD(j,j)'*W(:,j)'*X)/WE(j)./(beta4*V(j,:).^(-0.5)+beta2(j)*W(:,j)'*W*V+DD(j,j)'*W(:,j)'*W(:,j)*DD(j,j)*V(j,:)/WE(j)+eps+beta1*(diag(1./vecnorm(V(j,:),2,2)))*V(j,:))); 
                     %    V(j,:)=V(j,:).*((WDZ(:,j)'*XY)/WE(j)./(beta4*V(j,:).^(-0.5)+beta2(j)*WZ(:,j)'*WZ*V+WDZ(:,j)'*WDZ(:,j)*V(j,:)/WE(j)+eps));   
                     %   end
                      %  end
                        V=abs(V);
                       % for j=1:VD
                       % WE(j)=sqrt(trace((X-W(:,j)*D(j,j)*V(j,:))*(X-W(:,j)*D(j,j)*V(j,:))'));
                     
     %  H=D*V; 
      %   D=((1e-2)*H*H'+(1e-2)*H.*D2*H')/(beta3*H*H'+D1+(1e-6)*W'*(W.*D3));
                    end
                     
        
     for i=1:N
  V(:,i)=V(:,i)./sum(V(:,i));
     end
       H=DD*V;
                    end
                   
                   
                end
                elapsedT = toc;
            else
                tic
               
                while toc < timeBudgetUpdate(iter)
                 %   [HW,HD]=Cuprite_W(H);
                 %   H = H .* ((W'*(RX.*X)+HW)./(W'*(RX.*(W*H))+deta*W'*(RX.*R)+HD+1e-12));
                 D=D.*((W'*X*V')./(W'*W*D*V*V'+deta*W'*R*V'+eps));
               %  D=D.*((W'*X*V')./(W'*W*D*V*V'+deta*W'*R*V'+eps+beta4*D.^(-0.5)));
                      D1=diag(D);
                      D=diag(D1);
                        V=V.*((D'*W'*X+beta3*HW)./(beta4*V.^(-0.5)+beta3*HD+deta*D'*W'*R+D'*W'*W*D*V+eps));   
                        V=abs(V);
     %   H=D*V; 
      %   D=((1e-2)*H*H'+(1e-2)*H.*D2*H')/(beta3*H*H'+D1+(1e-6)*W'*(W.*D3));
       
         H=D*V;
     %   for i=1:N
   % H(:,i)=H(:,i)./sum(H(:,i));
   %end
     %   H=abs(H);
        R = R .*((deta*RX.*X)./ (deta*RX.*(W * H) + deta^2*RX.*R + beta2*R.^(-0.5)+eps));
       R=abs(R);
      % W=W.*((RX.*X*H')./(RX.*(W*H)*H'+deta*RX.*R*H'+1e-12));
      W=W.*((X*H')./((W*H)*H'+deta*R*H'+1e-12));
                end
                elapsedT = toc;
            end
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      
       case 'Cauchy'
            if isempty(timeBudgetUpdate)
                tic
                 for t=1:N                   
         PX(:,t)=X(:,t)-W*H(:,t);
         PX1{t}=norm(PX(:,t))^2;
         rho=(sum(PX1{t}))^2*(1e+5);
                end
         PQ=cell2mat(PX1); 
        RX=exp(-PX/rho);
               for k = 1:numUpdateIter
                    z = (3.*(W*H).*RX)./(X.^2+(W*H).^2);
    W = W .* (( (((W*H).*RX).^(-1))*H.' )./( z*H.' ));
                    if k < numUpdateIter
                        z = (3.*(W*H).*RX)./(X.^2+(W*H).^2);
    H = H .* (( W.'*(((W*H).*RX).^(-1)) )./( W.'*z ));
                    end
                end
                elapsedT = toc;
            else
                tic
                for t=1:N                   
         PX(:,t)=X(:,t)-W*H(:,t);
         PX1{t}=norm(PX(:,t))^2;
         rho=(sum(PX1{t}))^2*(1e+5);
                end
         PQ=cell2mat(PX1); 
        RX=exp(-PX/rho);
                while toc < timeBudgetUpdate(iter)
                   aW = (3./4).*((W*H).*RX./((W*H).^2+X.^2))*H.';
    bW = ((W*H).*RX.^(-1))*H.';
    W = W .* (bW./(aW + sqrt(aW.^2 + 2.*bW.*aW)));
                   aH = (3./4).*W.'*((W*H).*RX./((W*H).^2+X.^2));
    bH = W.'*((W*H).*RX.^(-1));
    H = H .* (bH./(aH + sqrt(aH.^2 + 2.*bH.*aH)));
                end
                elapsedT = toc;
            end
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
             case 'li'
                  
                  V_ap = W*H;
                 if isempty(timeBudgetUpdate)
                tic
                for k = 1:numUpdateIter
                    W = W .* ((X./V_ap)*H.')./repmat(sum(H,2)',D,1);
            scale = sum(W,1);
            V_ap = W*H;
                    if k < numUpdateIter
                        H = H .* (W.'*(X./V_ap))./repmat(scale',1,N);
            V_ap = W*H;
            
             LIS=ones(1,N);
            % LIS=sum(H,1);
                    end
                end
                elapsedT = toc;
            else
                tic
                while toc < timeBudgetUpdate(iter)
                     W = W .* ((X./V_ap)*H.')./repmat(sum(H,2)',D,1);
            scale = sum(W,1);
            V_ap = W*H;
             H = H .* (W.'*(X./V_ap))./repmat(scale',1,N);
            V_ap = W*H;
            LISS=sum(H,1);
            LISS=LIS;
                end
                elapsedT = toc;
                 end
              
            case 'IS'
                deta=0.1;
            beta2=1e-3;
          %  [HW,HD]=Cuprite_W(H);
 RX=construct_RX_C(X,W,H);
                 
                R=(X-W*H).*RX;
               V_ap =W*H;
                 if isempty(timeBudgetUpdate)
                tic
                for k = 1:numUpdateIter
                     W = W .* (((X.*RX.*V_ap.^(0-2))*H')./((V_ap).^(0-1)*H')).^(1/(2-0));
                    % W = W .* (((X.*V_ap.^(0-2))*H')./(V_ap.^(0-1)*H')).^(1/(2-0)+eps);
                   
                R=(X-W*H).*RX;
               V_ap =W*H;
                    if k < numUpdateIter
  [HW,HD]=Cuprite_W(H);                   
                        H = H .* ((W'*(X.*RX.*V_ap.^(0-2)))./(W'*(V_ap).^(0-1))).^(1/(2-0)+(1e-9)*HW);
                    % H = H .* ((W'*(X.*V_ap.^(0-2)))./(W'*V_ap.^(0-1))).^(1/(2-0)+eps);
           
                  
                R=(X-W*H).*RX;
               V_ap =W*H;
            
            % LIS=ones(1,N);
          %   LIS=sum(H,1);
                    end
                end
                elapsedT = toc;
            else
                tic
                while toc < timeBudgetUpdate(iter)
                     W = W .* (((X.*RX.*V_ap.^(0-2))*H')./((V_ap).^(0-1)*H')).^(1/(2-0));
            %scale = sum(W,1);
            % W = W .* ((X./V_ap)*H.')./repmat(sum(H,2)',D,1);
           % scale = sum(W,1);
             
                R=(X-W*H).*RX;
               V_ap =W*H;
            % H = H .* (W.'*(X./V_ap))./repmat(scale',1,N);
           % V_ap = W*H;
            HH1=H(:,1:4775);
     HU1=HH1-HH1*WN11-HH1*WN11'+HH1*WN11*WN11';
     HU1=HU1(:,1:4599);
HH2=H(:,4600:12600);
HU2=HH2-HH2*WN22-HH2*WN22'+HH2*WN22*WN22';
HU2=HU2(:,1:7400);
HH3=H(:,12000:20000);
HU3=HH3-HH3*WN33-HH3*WN33'+HH3*WN33*WN33';
HU3=HU3(:,1:7000);
HH4=H(:,19000:29000);
HU4=HH4-HH4*WN44-HH4*WN44'+HH4*WN44*WN44';
HU4=HU4(:,1:9000);
HH5=H(:,28000:38000);
HU5=HH5-HH5*WN55-HH5*WN55'+HH5*WN55*WN55';
HU5=HU5(:,1:9000);
HH6=H(:,37000:47750);
HU6=HH6-HH6*WN66-HH6*WN66'+HH6*WN66*WN66';
HW=cat(2,HU1,HU2,HU3,HU4,HU5,HU6);
               H = H .* ((W'*(X.*RX.*V_ap.^(0-2)))./(W'*(V_ap).^(0-1))).^(1/(2-0)+(1e-8)*HW);
                 for t=1:N                   
         PX(:,t)=X(:,t)-W*H(:,t);
         PX1{t}=norm(PX(:,t))^2;
         rho=(sum(PX1{t}))^2*(1e+5);
                end
         PQ=cell2mat(PX1); 
        RX=exp(-PX/rho);
                R=(X-W*H).*RX;
               V_ap =W*H;
           % LISS=sum(H,1);
          %  LISS=LIS;
                end
                elapsedT = toc;
                 end   
                 
                 
                 
                 
                 
                  case 'li_s'
                  
                  V_ap = W*H;
                 if isempty(timeBudgetUpdate)
                tic
                for k = 1:numUpdateIter
                    W = W .* ((X.*V_ap.^(1.6-2))*H')./(V_ap.^(1.6-1)*H');
            V_ap = W*H;
                    if k < numUpdateIter
                      H = H .* (W'*(X.*V_ap.^(1.6-2)))./(W'*V_ap.^(1.6-1));
            V_ap = W*H;
            
             LIS=ones(1,N);
             LIS=sum(H,1);
                    end
                end
                elapsedT = toc;
            else
                tic
                while toc < timeBudgetUpdate(iter)
                     W = W .* ((X.*V_ap.^(1.6-2))*H')./(V_ap.^(1.6-1)*H');
            V_ap = W*H;
             H = H .* (W'*(V.*V_ap.^(1.6-2)))./(W'*V_ap.^(1.6-1));
            V_ap = W*H;
            LISS=sum(H,1);
            LISS=LIS;
                end
                elapsedT = toc;
                 end
            
            
      case 'li_f'           
          V_ap = W*H;
                 if isempty(timeBudgetUpdate)
                tic
                for k = 1:numUpdateIter
                    W = W .* (((X.*V_ap.^(5-2))*H')./(V_ap.^(5-1)*H')).^(1/(5-1));
            V_ap = W*H;
                    if k < numUpdateIter
                      H = H .* ((W'*(X.*V_ap.^(5-2)))./(W'*V_ap.^(5-1))).^(1/(5-1));
            V_ap = W*H;
            
             LIS=ones(1,N);
             LIS=sum(H,1);
                    end
                end
                elapsedT = toc;
            else
                tic
                while toc < timeBudgetUpdate(iter)
                     W = W .* (((X.*V_ap.^(5-2))*H')./(V_ap.^(5-1)*H')).^(1/(5-1));
            V_ap = W*H;
             H = H .* ((W'*(X.*V_ap.^(5-2)))./(W'*V_ap.^(5-1))).^(1/(5-1));
            V_ap = W*H;
            LISS=sum(H,1);
            LISS=LIS;
                end
                elapsedT = toc;
                 end        
                 
                 
                 
        case 'ANLS_FC'
            if isempty(timeBudgetUpdate)
                tic
                mask = H > 0;
                for k = 1:numUpdateIter
                    %fprintf('update W\n')
                    Wt = sparseNNLS(X',H',[],[],K,K,W');
                    W = Wt';
                    if k < numUpdateIter
                        %fprintf('update H\n')
                        H = maskNNLS(X,W,[],[],mask,H);
                    end
                end
                elapsedT = toc;
            else
                tic
                mask = H > 0;
                while toc < timeBudgetUpdate(iter)
                    fprintf('.')
                    Wt = sparseNNLS(X',H',[],[],K,K,W');
                    W = Wt';
                    
                    if toc >= timeBudgetUpdate(iter)
                        break
                    end
                    
                    H = maskNNLS(X,W,[],[],mask,H);
                     LIS=ones(1,N);
              LISS=sum(H,1);
            LISS=LIS;
                end
                fprintf('\n')
                elapsedT = toc;
            end
            
        case 'ANLS_PG'
            %%% no time budget variant here
            if isempty(numUpdateIter)
                error('time budget variant not implemented for ANLS via projected gradient.\n');
            end
            tic
            mask = H > 0;
            for k = 1:numUpdateIter
                Wt = NNLS_PG(X',H',W',NNLS_PG_tolerance,NNLS_PG_maxIter);
                W = Wt';
                if k < numUpdateIter
                    H = NNLS_PG_mask(X,W,H,NNLS_PG_tolerance,NNLS_PG_maxIter,mask);
                end
            end
            elapsedT = toc;
            
            
        case 'NNKSVD'
            K = size(W,2);
            if isempty(timeBudgetUpdate)
                tic
                for k = 1:K
                    idx = H(k,:) > 0;
                    Etild = X(:,idx) - W(:,1:k-1) * H(1:k-1,idx) - W(:,k+1:end) * H(k+1:end,idx);
                    
                    [U,S,V] = svds(Etild,1);
                    V = V'*S;
                    
                    pu = max(U,0);
                    pv = max(V,0);
                    pu2 = max(-U,0);
                    pv2 = max(-V,0);
                    
                    if norm(Etild - pu2 * pv2,'fro') < norm(Etild - pu * pv,'fro')
                        pu = pu2;
                        pv = pv2;
                    end
                    
                    for l=1:numUpdateIter
                        pu = Etild * pv'  / (pv*pv');
                        pv = pu' * Etild / (pu'*pu);
                        pu = max(pu,0);
                        pv = max(pv,0);
                    end
                    
                    H(k,idx) = pv * norm(pu);
                    W(:,k) = pu / norm(pu);
                end
                elapsedT = toc;
            else
                elapsedT = 0;
                rp = randperm(K);
                for kcount = 1:K
                    tic
                    
                    k = rp(kcount);
                    
                    idx = H(k,:) > 0;
                    Etild = X(:,idx) - W(:,1:k-1) * H(1:k-1,idx) - W(:,k+1:end) * H(k+1:end,idx);
                    
                    [U,S,V] = svds(Etild,1);
                    V = V'*S;
                    
                    pu = max(U,0);
                    pv = max(V,0);
                    pu2 = max(-U,0);
                    pv2 = max(-V,0);
                    
                    if norm(Etild - pu2 * pv2,'fro') < norm(Etild - pu * pv,'fro')
                        pu = pu2;
                        pv = pv2;
                    end
                    
                    while toc < timeBudgetUpdate(iter) / K
                        pu = Etild * pv'  / max((pv*pv'),1e-12);
                        pv = pu' * Etild / max((pu'*pu),1e-12);
                        pu = max(pu,0);
                        pv = max(pv,0);
                    end
                    
                    H(k,idx) = pv * norm(pu);
                    W(:,k) = pu / norm(pu);
                    elapsedT = elapsedT + toc;
                end
            end
    end
    
    for i=1:N
    H(:,i)=H(:,i)./sum(H(:,i));
   end
    if nargout > 2
        E(iter) = norm(X-W*H,'fro');
        UDtime(iter) = elapsedT;
    end
    
    if VERBOSITY
        fprintf('Update-Error: %d\n',norm(X-W*H,'fro')/norm(X,'fro'));
    end
    
    %%% Reinitialize
    if strcmp(initType, 'rand')
        W = [W,rand(D,numUnused)];
    else
        rp = randperm(N);
        W = [W,X(:,rp(1:numUnused))];
    end
    
    W = W * diag(1./sqrt(sum(W.^2)));
end

if nargout > 2
    INFO.E = E;
    INFO.E_SC = E_SC;
    INFO.SCtime = SCtime;
    INFO.UDtime = UDtime;
end


